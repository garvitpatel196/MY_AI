/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package remotepc;

import com.onbarcode.barcode.IBarcode;
import com.onbarcode.barcode.QRCode;
import java.awt.AWTException;
import java.io.DataInputStream;
import java.io.IOException;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.script.ScriptException;
import javax.swing.ImageIcon;
import javax.swing.JFrame;

/**
 *
 * @author Garvit Patel
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    static Functionality function;
    static String result;
    static ImageIcon icon;
    static InetAddress[] IP;
    static JFrame f = new JFrame("Connecting...");
    static Boolean isConnected = false;
    static String newip;
    static String Command;
    static boolean Tmode = false;
    
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbarcode = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel(icon);
        jLabel4 = new javax.swing.JLabel();
        jFrameMenu = new javax.swing.JPanel();
        jStatus = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jCommand = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jCommandResult = new javax.swing.JTextArea();
        jConnectivityStatus = new javax.swing.JTextField("No Device Connected");
        jIp = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jSearchResult = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Scan Barcode To Connect");

        javax.swing.GroupLayout jbarcodeLayout = new javax.swing.GroupLayout(jbarcode);
        jbarcode.setLayout(jbarcodeLayout);
        jbarcodeLayout.setHorizontalGroup(
            jbarcodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jbarcodeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jbarcodeLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel4)
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jbarcodeLayout.setVerticalGroup(
            jbarcodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jbarcodeLayout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setLabelFor(jIp);
        jLabel2.setText("Enter IP to Connect :");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setLabelFor(jConnectivityStatus);
        jLabel5.setText("Connectivity Status :");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Command-Result");

        jCommandResult.setEditable(false);
        jCommandResult.setColumns(20);
        jCommandResult.setRows(5);
        jScrollPane2.setViewportView(jCommandResult);

        javax.swing.GroupLayout jCommandLayout = new javax.swing.GroupLayout(jCommand);
        jCommand.setLayout(jCommandLayout);
        jCommandLayout.setHorizontalGroup(
            jCommandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jCommandLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jCommandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jCommandLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jCommandLayout.setVerticalGroup(
            jCommandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jCommandLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        jConnectivityStatus.setBackground(new java.awt.Color(240, 240, 240));
        jConnectivityStatus.setEnabled(false);
        jConnectivityStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jConnectivityStatusActionPerformed(evt);
            }
        });

        jIp.setBackground(new java.awt.Color(240, 240, 240));
        jIp.setEnabled(false);

        javax.swing.GroupLayout jStatusLayout = new javax.swing.GroupLayout(jStatus);
        jStatus.setLayout(jStatusLayout);
        jStatusLayout.setHorizontalGroup(
            jStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jStatusLayout.createSequentialGroup()
                .addGroup(jStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jStatusLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jCommand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jStatusLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jConnectivityStatus)
                            .addComponent(jIp, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE))
                        .addGap(15, 15, 15)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jStatusLayout.setVerticalGroup(
            jStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jStatusLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jIp, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jConnectivityStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCommand, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jFrameMenuLayout = new javax.swing.GroupLayout(jFrameMenu);
        jFrameMenu.setLayout(jFrameMenuLayout);
        jFrameMenuLayout.setHorizontalGroup(
            jFrameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameMenuLayout.createSequentialGroup()
                .addComponent(jStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jFrameMenuLayout.setVerticalGroup(
            jFrameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Search Results");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(158, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(156, 156, 156))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jSearchResult.setEditable(false);
        jSearchResult.setColumns(20);
        jSearchResult.setRows(5);
        jScrollPane1.setViewportView(jSearchResult);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton1.setText("Read More");

        jButton2.setText("Google Search");

        jButton3.setText("Cancel Searching");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 61, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbarcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jFrameMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jbarcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFrameMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jConnectivityStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jConnectivityStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jConnectivityStatusActionPerformed

    /**
     * @param IP
     * @throws java.lang.Exception
     */
    public static void startServer(String IP) throws Exception {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        QRCode barcode = new QRCode();
        newip = IP;
        newip = newip.replace(newip.substring(0, newip.indexOf("/") + 1), "");
        barcode.setData(newip);
        barcode.setDataMode(QRCode.M_AUTO);
        barcode.setVersion(10);
        barcode.setEcl(QRCode.ECL_M);
        barcode.setProcessTilde(false);
        barcode.setUom(IBarcode.UOM_PIXEL);
        barcode.setX(3f);
        barcode.setLeftMargin(10f);
        barcode.setRightMargin(10f);
        barcode.setTopMargin(10f);
        barcode.setBottomMargin(10f);
        barcode.setResolution(72);
        icon = new ImageIcon(barcode.drawBarcode());
        
        java.awt.EventQueue.invokeLater(() -> {
            new GUI().setVisible(true);
            GUI.jIp.setText(newip);
            GUI.jConnectivityStatus.setText("No Device Connected");
        });
    }
    
    public static void main(String[] args) {
        try {
            
            ServerSocket serverSocket = new ServerSocket(8080);
            String hostName = InetAddress.getLocalHost().getHostName();
            IP = Inet4Address.getAllByName(hostName);
            System.out.println("My wifi Ip:" + IP[0]);
            startServer(IP[0].toString());
            Thread t1;
            t1 = new Thread() {
                @Override
                public void run() {
                    while (true) {
                        try {
                            Socket socket = serverSocket.accept();
                            DataInputStream dis = new DataInputStream(socket.getInputStream());
                            String str = dis.readLine();
                            //System.out.println(str);
                            String mes[] = str.split("/");
                            Command = mes[1];
                            Command = Command.replace(" HTTP", "");
                            Command = Command.toLowerCase();
                            
                            if (isConnected) {
                                result = Command;

                                
                                if (result.contains("keyboard") || result.contains("mouse")) { 
                                    result = result.replace("mouse-", "");
                                    result = result.replace("keyboard-", "");
                                    System.out.println("result:" + result);
                                    KeyboardMouse.mouse(result);
                                } else if (result.contains("typing") && result.contains("on")) {
                                    Tmode = true;
                                } else if (result.contains("typing") && result.contains("off")) {
                                    Tmode = false;
                                } else {
                                    result = ExtractMeaning.extractMeaning(result);
                                    GUI.jCommandResult.setText(result);
                                    Thread t2;
                                    t2 = new Thread() {
                                        @Override
                                        public void run() {
                                            
                                            result = result.replace("//" + "/[.,/'/#!$%^&*;:{}=_`~()]/g", "");
                                            //result = NLP.extractMeaning(result);
                                            if (Tmode) {
                                                try {
                                                    Functionality.type(result);
                                                } catch (AWTException ex) {
                                                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                }
                                            } else if (Tmode) {
                                                
                                            } else {
                                                switch (result) {
                                                    case "open c drive": {
                                                        try {
                                                            Functionality.openCDrive();
                                                            break;
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "open d drive": {
                                                        try {
                                                            Functionality.openDDrive();
                                                            break;
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "open e drive": {
                                                        try {
                                                            Functionality.openEDrive();
                                                            break;
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "open f drive": {
                                                        try {
                                                            Functionality.openFDrive();
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                        break;
                                                    }
                                                    case "open g drive": {
                                                        try {
                                                            Functionality.openGDrive();
                                                            break;
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "open h drive": {
                                                        try {
                                                            Functionality.openHDrive();
                                                            break;
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "open i drive": {
                                                        try {
                                                            Functionality.openIDrive();
                                                            break;
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "open j drive": {
                                                        try {
                                                            Functionality.openJDrive();
                                                            break;
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "open k drive": {
                                                        try {
                                                            Functionality.openKDrive();
                                                            break;
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "close": {
                                                        try {
                                                            Functionality.close();
                                                            break;
                                                        } catch (AWTException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "battery status": {
                                                        Functionality.batteryStatus();
                                                        break;
                                                    }
                                                    case "open browser": {
                                                        try {
                                                            Functionality.openBrowser();
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                        break;
                                                    }
                                                    case "cricket score": {
                                                        Functionality.cricketScore();
                                                        break;
                                                    }
                                                    case "open cmd": {
                                                        try {
                                                            Functionality.openCmd();
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                        break;
                                                    }
                                                    case "open notepad": {
                                                        try {
                                                            Functionality.openNotepad();
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                        break;
                                                    }
                                                    case "open controlpannel": {
                                                        try {
                                                            Functionality.openControlPannel();
                                                        } catch (IOException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                        break;
                                                    }
                                                    case "open facebook": {
                                                        try {
                                                            Functionality.openFacebook();
                                                            break;
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "open instagram": {
                                                        try {
                                                            Functionality.openInstagram();
                                                            break;
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "open gmail": {
                                                        try {
                                                            Functionality.openGmail();
                                                            break;
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "open linkedin": {
                                                        try {
                                                            Functionality.openLinkedIn();
                                                            break;
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "hotspot on": {
                                                        try {
                                                            Functionality.hotspotOn();
                                                        } catch (IOException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                        break;
                                                    }
                                                    case "hostspot off": {
                                                        try {
                                                            Functionality.hotspotOff();
                                                            break;
                                                        } catch (IOException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "open ppt": {
                                                        try {
                                                            Functionality.openPowerPoint();
                                                            break;
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "open word": {
                                                        try {
                                                            Functionality.openWord();
                                                            break;
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "hibernet": {
                                                        try {
                                                            Functionality.hibernet();
                                                            break;
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "sleep": {
                                                        try {
                                                            Functionality.openInstagram();
                                                            break;
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "shutdown": {
                                                        try {
                                                            Functionality.shutDown();
                                                            break;
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "lock screen": {
                                                        try {
                                                            Functionality.lockScreen();
                                                            break;
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "open wifisetttings": {
                                                        try {
                                                            Functionality.openWifiSettings();
                                                            break;
                                                        } catch (IOException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "personalize": {
                                                        try {
                                                            Functionality.personalize();
                                                            break;
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "weather": {
                                                        try {
                                                            Functionality.weather();
                                                        } catch (IOException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        } catch (ScriptException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                        break;
                                                    }
                                                    case "play music": {
                                                        try {
                                                            Functionality.playMusic();
                                                        } catch (InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                        break;
                                                    }
                                                    case "open videos": {
                                                        Functionality.playVideos();
                                                        break;
                                                    }
                                                    case "pause": {
                                                        Functionality.pause();
                                                        break;
                                                    }
                                                    case "play": {
                                                        Functionality.play();
                                                        break;
                                                    }
                                                    case "snapshot": {
                                                        try {
                                                            Functionality.takeSnapshot();
                                                        } catch (AWTException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                        break;
                                                    }
                                                    case "time": {
                                                        try {
                                                            Functionality.time();
                                                            break;
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "recent news": {
                                                        try {
                                                            Functionality.recentNews();
                                                        } catch (IOException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                        break;
                                                    }
                                                    case "next": {
                                                        Functionality.next();
                                                        break;
                                                    }
                                                    case "previous": {
                                                        Functionality.previous();
                                                        break;
                                                    }
                                                    case "take note": {
                                                        try {
                                                            Functionality.takeNote();
                                                            break;
                                                        } catch (IOException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                    case "remainder": {
                                                        try {
                                                            Functionality.remainder(result);
                                                        } catch (IOException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                        break;
                                                    }
                                                    default: {
                                                        try {
                                                            Functionality.search(result);
                                                        } catch (IOException | InstantiationException ex) {
                                                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    };
                                    t2.start();
                                }
                            }
                            if (Command.equals("deviceconnected") && isConnected == false) {
                                isConnected = true;
                                GUI.jConnectivityStatus.setText("Connected");
                                
                            }
                        } catch (Exception ex) {
                            System.out.println(ex);
                        }
                    }
                }
            };
            t1.start();
        } catch (IOException ex) {
            System.out.println(ex);
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jCommand;
    private static javax.swing.JTextArea jCommandResult;
    private static javax.swing.JTextField jConnectivityStatus;
    private javax.swing.JPanel jFrameMenu;
    private static javax.swing.JTextField jIp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JTextArea jSearchResult;
    private javax.swing.JPanel jStatus;
    private javax.swing.JPanel jbarcode;
    // End of variables declaration//GEN-END:variables
}
